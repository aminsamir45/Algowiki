 ,Family Name,Looked at?,Variation,Algo ID,Algorithm Description,Final Call,Exact Problem Statement?,Exact?,Time Complexity (Average),Average Case Distribution,Reference?,,Algorithm Name,Year,Paper/Reference Link,Constants,Derived?,Paper Reference for Constants,Time Complexity Improvement?,Transition Class,Time Complexity Class,Param: Time Class,Time Complexity (Worst Only),Parallel Algorithm Span,Parallel Algorithm Span References,Parallel Algorithm Work,Parallel Algorithm Work References,Reference mentions work efficiency?,Parameter definitions,Preferred Parameter,Time Complexity Reference,Derived Time Complexity?,Computational Model,Unit of Space,Space Complexity Class,Param: Space Class,Space Complexity (Auxiliary),Space Complexity Reference,Derived Space Complexity?,Space Complexity in Original Paper?,Interesting Space Complexity?,Randomized?,"Type of Randomized Algorithm (e.g. Las Vegas, Monte Carlo, Atlantic City)",Approximate?,Approximation Factor (if approximate algorithm),Heuristic-based?,Parallel?,"# of
Processors",Quantum?,GPU-based?,Other References,Problem Statement,"Algorithm family
parameters",Description of Inputs,Ratios of input parameter sizes,Space n = 1000 value,Space n = 1000 rate,Space n = 10^6 value,Space n = 10^6 rate,Space n = 10^9 value,Space n = 10^9 rate,n = 1000 value,n = 1000 scale,n = 1000 Rate,n = 10^6 value,n = 10^6 scale,n = 10^6 Rate,n = 10^9 value,n = 10^9 scale,n = 10^9 Rate,Starting Complexity,Remarks,Papers for ratio evaluations,Domains
1,Sorting,1,Comparison Sorting,10,,,1,1,O(nlogn),,,"[https://www.sciencedirect.com/science/article/pii/0196677492900166?via%3Dihub Cube Sort Parallel Implementation - Cypher, Sanz (1992)]","Cube Sort Parallel Implementation - Cypher, Sanz",1992,https://www.sciencedirect.com/science/article/pii/0196677492900166?via%3Dihub,,,,0,0,4,n: 4,$O(n log^2 n / (p log (n/p))$,$O(n log^2 n / (p log (n/p))$,https://www.sciencedirect.com/science/article/pii/0196677492900166?via%3Dihub,,https://www.sciencedirect.com/science/article/pii/0196677492900166?via%3Dihub,,"n: size of list
p: number of processors",n,,,Parallel RAM,words,3,n: 3,O(n),(can be easily derived),1,0,,0,,0,,0,1,p,0,0,https://en.wikipedia.org/wiki/Cubesort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,9965,100.3512293,,,,,,,,4,,,Combinatorics
1,Sorting,1,Comparison Sorting,17,,,1,1,O(log²n),,,"[https://epubs.siam.org/doi/abs/10.1137/0218014 Bitonic Merge Sort Parallel Implementation - Bilardi, Nicolau (1968)]","Bitonic Merge Sort Parallel Implementation - Bilardi, Nicolau",1968,https://epubs.siam.org/doi/abs/10.1137/0218014,2,,https://epubs.siam.org/doi/abs/10.1137/0218014,0,0,2,n: 2,$O((n log n)/p)$,$O(log^2 n)$,https://epubs.siam.org/doi/abs/10.1137/0218014,$O(n log n)$,https://epubs.siam.org/doi/abs/10.1137/0218014,no,"n: size of list
p: number of processors",n,,,PRAC (shared-memory multiprocessor of the EREW PRAM variety),words,1,n: 1,O(1),"Paper claims ""logspace uniform"", so with O(log n) words, this is constant # of words",0,1,,0,,0,,0,1,"p, at most O(n/log n)",0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,99,10101.0101,,,,,,,,4,,,Combinatorics
1,Sorting,1,Comparison Sorting,19,,,1,1,O(n²),Any distribution,Same general behavior across inputs,[https://www.semanticscholar.org/paper/Parallel-Neighbor-Sort-(or-the-Glory-of-the-Habermann/bc7b6efb99aae6225239425747fd0169a51f30ce Odd Even Sort Parallel  Implementation - Habermann (1972)],Odd Even Sort Parallel  Implementation - Habermann,1972,https://www.semanticscholar.org/paper/Parallel-Neighbor-Sort-(or-the-Glory-of-the-Habermann/bc7b6efb99aae6225239425747fd0169a51f30ce,,,,0,0,5,n: 5,O(n^2/p),$O(n)$,https://www.semanticscholar.org/paper/Parallel-Neighbor-Sort-(or-the-Glory-of-the-Habermann/bc7b6efb99aae6225239425747fd0169a51f30ce,$O(n^2)$,https://www.semanticscholar.org/paper/Parallel-Neighbor-Sort-(or-the-Glory-of-the-Habermann/bc7b6efb99aae6225239425747fd0169a51f30ce,yes (compares to quicksort),n: size of list,n,,,Word RAM,words,1,n: 1,O(1),in-situ,0,1,,0,,0,,0,1,"p, at most O(n)",0,0,https://en.wikipedia.org/wiki/Odd%E2%80%93even_sort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000000,1,,,,,,,,4,,,Combinatorics
1,Sorting,0.001,Non-Comparison Sorting,25,,,1,1,O(n),Any distribution,need to read entire input,[https://link.springer.com/chapter/10.1007/978-94-009-2794-0_11 Spaghetti Sort Parallel Implementation - Steiglitz (1984)],Spaghetti Sort Parallel Implementation - Steiglitz,1984,https://link.springer.com/chapter/10.1007/978-94-009-2794-0_11,,,,0,0,3,n: 3,O(n),,,,,,n: size of list,n,,,???,words,1,n: 1,O(1) auxiliary? per processor?,"Assuming getting the spaghetti rods doesn't take up any auxiliary space, the only auxiliary space in this algorithm involves the table and the hands, each using O(1) space",1,0,,0,,0,,0,1,,0,0,https://en.wikipedia.org/wiki/Spaghetti_sort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000,1000,,,,,,,,4,,,Combinatorics
1,Sorting,0.001,Non-Comparison Sorting,,integer sort,,,,,,,,Reif,1985,https://ieeexplore.ieee.org/abstract/document/4568176,,,,,,,,O(log(n)),O(log(n)) ?,,O(n) ?,,"""optimal"" - efficiency=1",n: size of list,,,,Parallel RAM,,,,,,,,,1,,,,,,n/log(n),,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,1,Comparison Sorting,,"""sorting network""; expander graphs, epsilon-halving, epsilon-nearsort",,,,,,,,"Aijtai, Komlos, Szemeredi",1983,https://dl.acm.org/doi/pdf/10.1145/800061.808726,"""very large""; ""unsuitable for actual implementation""",,https://dl.acm.org/doi/pdf/10.1145/800061.808726,,,,,O(log(n)),O(log(n)) ?,https://dl.acm.org/doi/pdf/10.1145/800061.808726,O(n log^2(n)) ?,https://dl.acm.org/doi/pdf/10.1145/800061.808726,,n: size of list,n,,,"""comparator network - deterministic sequence of switches"" ??",,,,,,,,,,,,,,,n log(n),,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,1,,,,,1,1,O(logn),,,[https://epubs.siam.org/doi/abs/10.1137/0217049 Parallel Merge Sort - Cole (1) (1988)],Parallel Merge Sort - Cole (1),1988,https://epubs.siam.org/doi/abs/10.1137/0217049,5/2,,https://epubs.siam.org/doi/abs/10.1137/0217049,,,,,O(logn),$O(log n)$,https://epubs.siam.org/doi/abs/10.1137/0217049,$O(n log n)$,https://epubs.siam.org/doi/abs/10.1137/0217049,yes?,n: size of list,,,,CREW PRAM,words,,,,,,,,0,,0,,0,1,n,0,0,,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,,,,,,,,,,,,,,,,,,,4,,,Combinatorics
1,Sorting ,1,,,,,1,1,O(logn),,,[https://epubs.siam.org/doi/abs/10.1137/0217049 Parallel Merge Sort - Cole (2) (1988)],Parallel Merge Sort - Cole (2),1988,https://epubs.siam.org/doi/abs/10.1137/0217049,5,,https://epubs.siam.org/doi/abs/10.1137/0217049,,,,,O(logn),$O(log n)$,https://epubs.siam.org/doi/abs/10.1137/0217049,$O(n log n)$,https://epubs.siam.org/doi/abs/10.1137/0217049,yes?,n: size of list,,,,EREW PRAM,words,,,,,,,,0,,0,,0,1,n,0,0,,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,,,,,,,,,,,,,,,,,,,4,,,Combinatorics
1,Sorting,1,Comparison Sorting,,,,,,,,,,"Parallel Neighborhood sort - Baudet, Stevenson",1975,https://kilthub.cmu.edu/articles/Optimal_sorting_algorithms_for_parallel_computers/6608162/files/12099023.pdf,,,,,,,,"O(n log(n)/k +n)
or O(n) if k=log n",O(n),,O(n log n),https://kilthub.cmu.edu/articles/Optimal_sorting_algorithms_for_parallel_computers/6608162/files/12099023.pdf,"if k=log n
""optimal"" - 
speedup=k
efficiency=1","n: size of list
k: number of processors",,,,SIMD,,,,,,,,,,,,,,1,k=log n,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0.001,,,,,,,,,,,Batcher,1968,https://dl.acm.org/doi/abs/10.1145/1468075.1468121,,,,,,,,O(log^2(n)),,,,,,n: size of list,,https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=1675167,,,,,,,,,,,,,,,,1,O(n log^2(n)),,,first found in https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=1675167,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Batcher,1968,https://dl.acm.org/doi/abs/10.1145/1468075.1468121,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0.001,,,,,,,,,,,Muller and Preperata,1975,https://dl.acm.org/doi/pdf/10.1145/321879.321882,,,,,,,,O(log(n)),,,,,,n: size of list,,https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=1675167,,,,,,,,,,,,,,,,1,O(n^2),,,first found in https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=1675167,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,1,,,,,,,,,,,Parallel Merge Sort - Valiant,1975,https://epubs.siam.org/doi/abs/10.1137/0204030,,,,,,,,2logn*loglogn + 0(logn),2logn*loglogn + 0(logn),,O(n log n),https://epubs.siam.org/doi/abs/10.1137/0204030,,n: size of list,,https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=1675167,,,,,,,,,,,,,,,,1,n/2,,,first found in https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=1675167,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,"""enumeration sorting""",,,,,,,,Parallel bucket-sort - Hirschberg,1977,https://dl.acm.org/doi/abs/10.1145/359576.359582,,,,,,,,O(klog(n)),,,,,,"n: size of list
k: arbitrary int >=2",,https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=1675167,,SIMD-SM-R,,,,,,,,,,,,,,1,n^(1+1/k),,,first found in https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=1675167,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,1,,,"Uses Valiant's [1975] merge technique; ""enumeration sorting"", allows fetch conflicts",,,,,,,,Preperata,1977,https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=1675167&tag=1,,,,,,,,O(log(n)),,,,,,n: size of list,,,,SIMD-SM-R ? (memory fetch conflicts),,,,,,,,,,,,,,1,n log(n),,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,1,,,"Uses Valiant's [1975] merge technique; ""enumeration sorting"", doesn't allow fetch conflicts",,,,,,,,Preperata,1977,https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=1675167&tag=1,,,,,,,,O(log(n)),,,,,,"n: size of list
0>alpha<=1",,,,SIMD-SM ? (no memory fetch conflicts),,,,,,,,,,,,,,1,n^(1+alpha),,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,parallel tape sort - Even,1974,https://dl.acm.org/doi/abs/10.1145/360924.360941,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Reischuk,1985,https://epubs.siam.org/doi/abs/10.1137/0214030,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Haggkvist and Hell,1981,https://epubs.siam.org/doi/abs/10.1137/0210034,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Bentley and Kung,1979,https://www.eecs.harvard.edu/htk/static/files/bg891xp4727.pdf,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Stone,1971,https://ieeexplore.ieee.org/abstract/document/1671798,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Siegel,1977,https://dl.acm.org/doi/abs/10.1145/800255.810655,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Van Voorhis,1971,https://apps.dtic.mil/sti/citations/AD0737270; https://ieeexplore.ieee.org/abstract/document/5009021,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Nassimi and Sahni,1979,https://ieeexplore.ieee.org/abstract/document/1675216,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Thompson and Kung,1977,https://dl.acm.org/doi/abs/10.1145/359461.359481,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Kumar and Hirschberg,1983,https://ieeexplore.ieee.org/abstract/document/1676217; https://scholarship.rice.edu/handle/1911/104542 ?,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Pease,1977,https://www.computer.org/csdl/journal/tc/1977/05/01674863/13rRUxC0SuZ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Preperata and Vuillemin,1979,https://dl.acm.org/doi/abs/10.1145/358645.358660; https://ieeexplore.ieee.org/abstract/document/4568010,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Ajtai et al.,1983,https://dl.acm.org/doi/pdf/10.1145/800061.808726,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Borodin and Hopcroft,1982,https://dl.acm.org/doi/abs/10.1145/800070.802209,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Gavril,1975,https://dl.acm.org/doi/abs/10.1145/361020.361216,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Fishburn and Finkel,1982,https://ieeexplore.ieee.org/abstract/document/1675994,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Hsiao and Menon,1980,https://apps.dtic.mil/sti/citations/ADA090192,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Alekseyev,1969,https://link.springer.com/article/10.1007/BF01267888,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Knuth,1973,https://www.rose-hulman.edu/class/cs/csse230/202020/Slides/19-HashTableAnalysis.pdf,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Chen et al.,1978,https://dl.acm.org/doi/abs/10.5555/1286643.1286685,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Chung et al.,1980,https://ieeexplore.ieee.org/abstract/document/5390784,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Dohi et al.,1982,https://dl.acm.org/doi/abs/10.1145/1067649.801730,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Lee et al.,1981,https://ieeexplore.ieee.org/abstract/document/1675805,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Thompson,1983,https://link.springer.com/chapter/10.1007/978-3-642-68402-9_13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Yasuura et al.,1982,https://ieeexplore.ieee.org/abstract/document/1675943,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,Leiserson,1981,https://www.proquest.com/docview/303100225?pq-origsite=gscholar&fromopenview=true,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
1,Sorting,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
3,Matrix Chain Multiplication,1,Approximate MCOP,35,,,1,0,O(\log n),,,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.218.8168&rep=rep1&type=pdf Czumaj (1996)],Czumaj,1996,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.218.8168&rep=rep1&type=pdf,,,,0,0,2,n: 2,$O(\log n)$,$O(log n)$,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.218.8168&rep=rep1&type=pdf,$O(n)$,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.218.8168&rep=rep1&type=pdf,yes (page 2),n: number of matrices in chain,n,,,CREW PRAM,words?,3,n: 3,$O(n)$,"Derived: solving the optimal triangulation problem of a convex polygon where there are $n+1$ vertices and $n+1$, so total $O(n)$ auxiliary space",1,0,,0,n/a,1,1.1547,0,1,$n / \log n$,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,9.965,Inf,,,,,,,,1,,,Combinatorics
3,Matrix Chain Multiplication,1,Approximate MCOP,35.1,,,1,0,O(\log \log n),,,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.218.8168&rep=rep1&type=pdf Czumaj (1996)],Czumaj,1996,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.218.8168&rep=rep1&type=pdf,,,,0,0,1.99,n: 1.99,$O(\log \log n)$,$O(log log n)$,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.218.8168&rep=rep1&type=pdf,$O(n)$,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.218.8168&rep=rep1&type=pdf,yes (page 2),n: number of matrices in chain,n,,,COMMON CRCW PRAM,words?,3,n: 3,$O(n)$,"Derived: solving the optimal triangulation problem of a convex polygon where there are $n+1$ vertices and $n+1$, so total $O(n)$ auxiliary space",1,0,,0,n/a,1,1.1547,0,1,$n / \log \log n$,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,9.965,Inf,,,,,,,,1,,,Combinatorics
3,Matrix Chain Multiplication,0.001,Approximate MCSP,32,,,1,1,O(n^2),,,[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.56.222&rep=rep1&type=pdf Heejo Lee; Jong Kim; Sungje Hong; and Sunggu Lee (1997)],Heejo Lee; Jong Kim; Sungje Hong; and Sunggu Lee,1997,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.56.222&rep=rep1&type=pdf,,,,0,0,5,n: 5,$O(n^2+nP)$,,,,,,"$P$: number of processors
$n$: number of matrices",n,,,"""parallel system""",words,5,n: 5,$O(n^2)$?,Derived: two $n \times n$ size tables ($S$ and $W$),1,0,,0,,1,"""near optimal""",0,1,$P$,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,1000000,Inf,,,,,,,,1,,,Combinatorics
3,Matrix Chain Multiplication,1,Approximate MCOP,33,,,1,1,O(log^4 n),,,[https://epubs.siam.org/doi/abs/10.1137/0225039 Prakesh Ramanan (1996)],Prakesh Ramanan,1996,https://epubs.siam.org/doi/abs/10.1137/0225039,,,,0,0,2.03,n: 2.03,$O(\log^4 n)$,$O(\log^4 n)$,https://epubs.siam.org/doi/abs/10.1137/0225039,$O(n\log^4 n)$?,https://epubs.siam.org/doi/abs/10.1137/0225039,no,$n$: number of matrices,n,,,CREW PRAM,words,3,n: 3,$O(n)$?,Derived: $n$ subtrees and each one has a $O(1)$ size trunk,1,0,,0,,0,,0,1,$n$,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,99,Inf,,,,,,,,1,,,Combinatorics
3,Matrix Chain Multiplication,1,Matrix Chain Scheduling Problem,34,,,1,1,O (log^3 n),,,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.54.9426&rep=rep1&type=pdf Czumaj (1993)],Czumaj,1993,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.54.9426&rep=rep1&type=pdf,,,,0,0,2.02,n: 2.02,O(log^3 n),$O(log^3 n)$,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.54.9426&rep=rep1&type=pdf,$O(n^2)$,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.54.9426&rep=rep1&type=pdf,no?,$n$: number of matrices,n,,,CREW PRAM,words,5,n: 5,$O(n^2)$?,Derived: uses two arrays ($D$ and $c$) both of size $O(n^2)$,1,0,,0,,0,,0,1,$O(n^2 / \log^3 n)$,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,989,Inf,,,,,,,,1,,,Combinatorics
4,Least Common Subsequence,1,LCS,,,,,,,,,[https://ieeexplore.ieee.org/document/298210 Lu & Lin (1994)],Lu & Lin,1994,https://ieeexplore.ieee.org/document/298210,,,,,,,,O(log^2 m + log n),O(log^2 m + log n),https://ieeexplore.ieee.org/document/298210,O(mn (log m + log n/log m)),https://ieeexplore.ieee.org/document/298210,no?,"m: length of shorter string
n: length of longer string",,,,CREW PRAM,,,,,,,,,0,,0,,0,1,O(mn/log m),0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,,,,
4,Least Common Subsequence,1,LCS,,,,,,,,,[https://ieeexplore.ieee.org/document/298210 Lu & Lin (1994)],Lu & Lin,1994,https://ieeexplore.ieee.org/document/298210,,,,,,,,"O(log^2 m log log m) if 
log^2 m log log m > log n else
O(log n)","O(log^2 m log log m) 
if log^2 m log log m 
> log n else O(log n)",https://ieeexplore.ieee.org/document/298210,O(mn),https://ieeexplore.ieee.org/document/298210,no?,"m: length of shorter string
n: length of longer string",,,,CREW PRAM,,,,,,,,,0,,0,,0,1,"O(mn/(log^2 m 
log log m)) if
log^2 m log log m
< log n else
O(mn/log n)",0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,,,,
4,Least Common Subsequence,1,LCS,,,,,,,,,[https://ieeexplore.ieee.org/document/21966 Aggarwal & Park (1988)],Aggarwal & Park,1988,https://ieeexplore.ieee.org/document/21966,,,,,,,,O(log m log n),O(log m log n),https://ieeexplore.ieee.org/document/21966,O(mn log n),https://ieeexplore.ieee.org/document/21966,no?,"m: length of shorter string
n: length of longer string",,,,CREW PRAM,,,,,,,,,0,,0,,0,1,O(mn/log m),0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,,,,
4,Least Common Subsequence,1,LCS,,,,,,,,,[https://www.proquest.com/openview/efa7264fa824ce7768c53ccdcc6d1458/1?pq-origsite=gscholar&cbl=666313 Apostolico (1990)],Apostolico,1990,https://www.proquest.com/openview/efa7264fa824ce7768c53ccdcc6d1458/1?pq-origsite=gscholar&cbl=666313,,,,,,,,O(log m log n),O(log m log n),https://www.proquest.com/openview/efa7264fa824ce7768c53ccdcc6d1458/1?pq-origsite=gscholar&cbl=666313,O(mn log n),https://www.proquest.com/openview/efa7264fa824ce7768c53ccdcc6d1458/1?pq-origsite=gscholar&cbl=666313,no?,"m: length of shorter string
n: length of longer string",,,,CREW PRAM,,,,,,,,,0,,0,,0,1,O(mn/log m),0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,,,,
4,Least Common Subsequence,1,LCS,,,,,,,,,[https://kilthub.cmu.edu/articles/journal_contribution/A_fast_parallel_algorithm_to_determine_edit_distance/6587387/1 Mathies (1988)],Mathies,1988,https://kilthub.cmu.edu/articles/journal_contribution/A_fast_parallel_algorithm_to_determine_edit_distance/6587387/1,,,,,,,,O(log m log n),O(log m log n),https://kilthub.cmu.edu/articles/journal_contribution/A_fast_parallel_algorithm_to_determine_edit_distance/6587387/1,O(mn log m log n),https://kilthub.cmu.edu/articles/journal_contribution/A_fast_parallel_algorithm_to_determine_edit_distance/6587387/1,no?,"m: length of shorter string
n: length of longer string",,,,CRCW PRAM,,,,,,,,,0,,0,,0,1,O(mn),0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,,,,,,,,,,,,,
5,Maximum Flow,1,,,,,1,1,O(V^3*log(V)/p),(see max flow in sheet1),,[http://users.umiacs.umd.edu/~vishkin/TEACHING/4CLASS/SV82-maxflow.pdf Shiloach (1981)],Shiloach,1981,http://users.umiacs.umd.edu/~vishkin/TEACHING/4CLASS/SV82-maxflow.pdf,,,,,0,,,O(V^3*log(V)/p),$O(V^3*log(V)/p)$,http://users.umiacs.umd.edu/~vishkin/TEACHING/4CLASS/SV82-maxflow.pdf,$O(V^3*log(V))$,http://users.umiacs.umd.edu/~vishkin/TEACHING/4CLASS/SV82-maxflow.pdf,yes relative to sequential algorithm described in paper,"V: number of vertices
E: number of edges
U: maximum edge capacity
p: number of processors",,,,Parallel RAM (unclear what type; seems like any could work?),words,O(E),"V: 5,
E: 3",can be derived?,,,,,0,,0,,0,1,p,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,,,,,,,,,,,,,,,,,2,,,Combinatorics
5,Maximum Flow,1,Integer Maximum Flow,,,,1,1,O(V^1.66 log(V) log(U)),(see max flow in sheet1),,[https://dl.acm.org/citation.cfm?id=290181 Goldberg & Rao (Parallel) (1997)],Goldberg & Rao (Parallel),1997,https://dl.acm.org/citation.cfm?id=290181,,,,,0,4.66,,O(V^1.66 log(V) log(U)),$O(V^1.66 log(V) log(U))$,https://dl.acm.org/citation.cfm?id=290181,$O(V^2.66 log(V) log(U))$?,Derived,,"V: number of vertices
E: number of edges
U: maximum edge capacity",,,,PRAM,words,O(V^2),V: 5,https://dl.acm.org/citation.cfm?id=290181,,,,,0,,0,,0,1,O(V),0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,,,,,,,,,,,,,,,,,2,,,Combinatorics
5,Maximum Flow,1,Integer Maximum Flow,,,,1,1,O(E^0.5 V log(V) log(U)),(see max flow in sheet1),,[https://dl.acm.org/citation.cfm?id=290181 Goldberg & Rao (Parallel) (1997)],Goldberg & Rao (Parallel),1997,https://dl.acm.org/citation.cfm?id=290181,,,,,0,5,,O(E^0.5 V log(V) log(U)),$O(E^0.5 V log(V) log(U))$,https://dl.acm.org/citation.cfm?id=290181,$O(E^0.5 V^2 log(V) log(U))$?,Derived,,"V: number of vertices
E: number of edges
U: maximum edge capacity",,,,PRAM,words,O(V^2),V: 5,https://dl.acm.org/citation.cfm?id=290181,,,,,0,,0,,0,1,O(V),0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,,,,,,,,,,,,,,,,,2,,,Combinatorics
10,Linear Programming,1,General Linear Programming,,,,,,,,,[https://epubs.siam.org/doi/pdf/10.1137/S0097539792234858 Ajtai & Megiddo (1996)],Ajtai & Megiddo,1996,https://epubs.siam.org/doi/pdf/10.1137/S0097539792234858,,,,,,,,O((log log n)^d),O((log log n)^d),https://epubs.siam.org/doi/pdf/10.1137/S0097539792234858,O(n(log log n)^d),Derived,no,"n: number of constraints
d: number of dimensions",,,,CRCW PRAM,,,,,,,,,0,,0,,0,1,O(n),0,0,,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,,,,,,,,,,,,,,,,,,,,
10,Linear Programming,1,General Linear Programming,,,,,,,,,[https://dl.acm.org/doi/pdf/10.1145/167088.167211 Dyer (1993)],Dyer,1993,https://dl.acm.org/doi/pdf/10.1145/167088.167211,,,,,,,,O(log n(log log n)^(d-1)),O(log n(log log n)^(d-1)),https://dl.acm.org/doi/pdf/10.1145/167088.167211,O(nlog n(log log n)^(d-1)),Derived,no,"n: number of constraints
d: number of dimensions",,,,EREW PRAM,,,,,,,,,0,,0,,0,1,O(n),0,0,,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,,,,,,,,,,,,,,,,,,,,
10,Linear Programming,1,"General Linear Programming 
",,,,,,,,,[https://ieeexplore.ieee.org/document/89578 Alon & Megiddo (1990)],Alon & Megiddo,1990,https://ieeexplore.ieee.org/document/89578,,,,,,,,O(d^2 log^2 d) with probability approaching 1,O(d^2 log^2 d) with probability approaching 1,https://ieeexplore.ieee.org/document/89578,O(d^3 n),https://ieeexplore.ieee.org/document/89578,yes,"n: number of constraints
d: number of dimensions",,,,CRCW PRAM,,,,,,,,,0,,0,,0,1,O(nd/log^2 d),0,0,,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,,,,,,,,,,,,,,,,,,,,
10,Linear Programming,1,"General Linear Programming 
(only 2 -dimensional)",,,,,,,,,[https://www.sciencedirect.com/science/article/pii/002001909090026T?ref=pdf_download&fr=RR-2&rr=7d29f5c94c8e2249 Deng (1990)],Deng,1990,https://www.sciencedirect.com/science/article/pii/002001909090026T?ref=pdf_download&fr=RR-2&rr=7d29f5c94c8e2249,,,,,,,,O(log n),O(log n),https://www.sciencedirect.com/science/article/pii/002001909090026T?ref=pdf_download&fr=RR-2&rr=7d29f5c94c8e2249,O(n),https://www.sciencedirect.com/science/article/pii/002001909090026T?ref=pdf_download&fr=RR-2&rr=7d29f5c94c8e2249,yes,n: number of constraints,,,,CRCW PRAM,,,,,,,,,0,,0,,0,1,O(n/log n),0,0,,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,,,,,,,,,,,,,,,,,,,,
11,Line segment intersection,1,"Reporting all intersection points, line segments",126,,,1,1,O(log^2(n)),,,[https://dl.acm.org/citation.cfm?id=72950 Goodrich (1989)],Goodrich,1989,https://dl.acm.org/citation.cfm?id=72950,,,,0,0,2,n: 2,$O(\log^2(n))$,$O(\log^2(n))$,https://dl.acm.org/citation.cfm?id=72950,$O(n\log^2(n) + k\log(n))$,https://dl.acm.org/citation.cfm?id=72950,yes (but algo is not optimal),"n: number of line segments
k: number of points of intersection",n,,,CREW PRAM,words,3,"n: 3,
k: 3",O(n+k) total?,"Seems to require creating/storing an O(n)-sized data structure (""segment tree""), and then computing the O(k) intersections using the data structure",1,0,,0,,0,,0,1,O(n + k/log n),0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,99.3,10070.49345,,,,,,,,4,,,Image Processing
12,Convex Hull,1,2-dimensional,136,,,1,1,"O(logn) time using
O(n) processors",,,[https://cse.buffalo.edu/faculty/miller/Papers/IEEETC88a.pdf Miller; Stout (1988)],Miller; Stout,1988,https://cse.buffalo.edu/faculty/miller/Papers/IEEETC88a.pdf,,,,1,5->7,#VALUE!,,"$O(logn)$ time using
$O(n)$ processors",$O(\log n)$,https://cse.buffalo.edu/faculty/miller/Papers/IEEETC88a.pdf,$O(n \log n)$,https://cse.buffalo.edu/faculty/miller/Papers/IEEETC88a.pdf,"yes, implicitly (can't do better than sorting)","n: number of line segments
h: number of points on the convex hull",n,,,"EREW PRAM, possibly others (see paper)",words,3,n: 3,O(n) total?,Divide and conquer can be done in linear space total as space can be reused after conquer steps,1,0,,0,,0,,0,1,O(n),0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9.965,100351229.3,,,,,,,,3,,,Image Processing
13,Strongly Connected Components,1,SCCs,140,,,1,1,O(ElogV+V),,,[https://ldhulipala.github.io/readings/sequential-scc.pdf Fleischer forward-backward (FB) algorithm (2003)],Fleischer forward-backward (FB) algorithm,2003,https://ldhulipala.github.io/readings/sequential-scc.pdf,,,,0,0,5.01,"E: 3,
V: 5.01",$O(E\log V+V)$,$O(E\log V+V)$?,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,$O(E\log V+V)$? (sequentially),http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,no,"V: number of vertices
E: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 3",O(V+E),constructing recursive subgraphs? and reuse space across recursive calls,1,0,,0,,0,,0,1,$O(n)$,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,428571,0.002333335667,,,,,,,,4,,,Combinatorics
13,Strongly Connected Components,0.001,SCCs,144,,,1,1,O(V^2),,,[http://www.cs.ox.ac.uk/people/gavin.lowe/parallelDFS.html Lowe’s Algorithm (2014)],Lowe’s Algorithm,2014,http://www.cs.ox.ac.uk/people/gavin.lowe/parallelDFS.html,,,,0,0,5,"V: 5,
E: 3",$O(V^2)$,"$O(V^2)$? (""cost of transferring from one search to another"")",http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,$O(V^2)$,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,no,"V: number of vertices
E: number of edges
p: number of processors",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V) per processor,(can be easily derived?),1,0,,0,,0,,0,1,,0,0,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,184244,0.005427585159,,,,,,,,4,,,Combinatorics
13,Strongly Connected Components,1,SCCs,145,,,1,1,"O(p*(V+E)*alpha(V, E))?",,,[https://link.springer.com/chapter/10.1007/978-3-642-45221-5_44 Renault’s Algorithm (2009)],Renault’s Algorithm,2009,https://link.springer.com/chapter/10.1007/978-3-642-45221-5_44,,,,0,0,5,"V: 5,
E: 3,
p: 3","$O(p*(V+E)*\alpha(V, E))$","$O((V+E)*\alpha(V, E))$",http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,"$O(p*(V+E)*\alpha(V, E))$",http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,no,"V: number of vertices
E: number of edges
p: number of processors",V,,,Word RAM,words,3,"V: 3,
E: 1",O(V) per processor,(can be easily derived?),1,0,,0,,0,,0,1,$p$,0,0,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,183673,0.005444458358,,,,,,,,4,,,Combinatorics
13,Strongly Connected Components,1,SCCs,148,,,1,1,O(V(V+E)),,,[https://ieeexplore.ieee.org/document/8133154 OBF Algorithm (2011)],OBF Algorithm,2011,https://ieeexplore.ieee.org/document/8133154,,,,0,0,6,"E: 3,
V: 6",$O(V(V+E))$,$O(E\log V+V)$? (see FB algorithm),http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,$O(E\log V+V)$? (sequentially),http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,no,"V: number of vertices
E: number of edges
p: number of processors",V,,,Word RAM,words,5,"V: 5,
E: 3",O(E+V^2) total,https://ris.utwente.nl/ws/files/6872352/Barnat09distributed.pdf,0,1,,0,,0,,0,1,$O(n)$,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,428571,0.002333335667,,,,,,,,4,,,Combinatorics
13,Strongly Connected Components,1,SCCs,149,,,1,1,O(VE),,,[https://research.vu.nl/en/publications/on-distributed-verification-and-verified-distribution CH Algorithm (2004)],CH Algorithm,2004,https://research.vu.nl/en/publications/on-distributed-verification-and-verified-distribution,,,,0,0,6,"E: 3,
V: 6",$O(VE)$,$O(E)$??,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf (for work),$O(VE)$,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf (for work),no,"V: number of vertices
E: number of edges
p: number of processors",V,,,Word RAM,words,3,"V: 3,
E: 3",O(V+E)?,Each vertex needs to keep track of one color; then we need to build recursive subgraphs,1,0,,0,,0,,0,1,$O(n)$,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,244897,0.004083349326,,,,,,,,4,,,Combinatorics
13,Strongly Connected Components,1,SCCs,150,,,1,1,O(V(V+E)),,,[https://stanford-ppl.github.io/website/papers/sc13-hong.pdf Hong’s algorithm (2013)],Hong’s algorithm,2013,https://stanford-ppl.github.io/website/papers/sc13-hong.pdf,,,,0,0,6,"E: 3,
V: 6",$O(V(V+E))$,$O(E\log V+V)$? (see FB algorithm),http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,$O(E\log V+V)$? (sequentially),http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,no,"V: number of vertices
E: number of edges
p: number of processors",V,,,Word RAM,words,3,"V: 3,
E: 3",O(V+E)?,Building recursive subgraphs,1,0,,0,,0,,0,1,$O(n)$,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,428571,0.002333335667,,,,,,,,4,,,Combinatorics
13,Strongly Connected Components,0.001,SCCs,,,,1,1,O(V+E),,,[https://www.semanticscholar.org/paper/Depth-First-Search-and-Linear-Graph-Algorithms-Tarjan/385742fffcf113656f0d3cf6c06ef95cb8439dc6 Geldenhuys-Valmari (2004)],Geldenhuys-Valmari,2004,https://www.semanticscholar.org/paper/Depth-First-Search-and-Linear-Graph-Algorithms-Tarjan/385742fffcf113656f0d3cf6c06ef95cb8439dc6,,,,,,,,O(V+E),,,,,,"V: number of vertices
E: number of edges",,,,Word RAM,words,O(V)?,V: 3,(follow-up from Tarjan's algorithm),,,,,0,,0,,0,1,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,,,,,,,,,,,,,,,,,,,,Combinatorics
13,Strongly Connected Components,1,SCCs,,BFS method,,,,,,,,Reghbati (Arjomandi) and Corneil,1978,https://epubs.siam.org/doi/abs/10.1137/0207020,,,,,,,,T/p+L log(p)+2n,O(n),,O(n+m) ?,,"yes - compares to sequential BFS search algorithm; ""superior to sequential algorithm for h-dense graphs where h>=ceiling(log k)+7 (h-dense: #edges>=h*n/2)""","n: number of vertices
m: number of edges
p: number of processors
d: diameter of graph
L: distance of node farhest from start node
T: complexity of optimal sequantial BFS algo",,,,SIMD-SM-R (CREW PRAM?),,,,,,,,,,,,,,1,p,,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
13,Strongly Connected Components,1,SCCs; Transitive Closure,,Transitive closure method,,,,,,,,Reghbati (Arjomandi) and Corneil,1978,https://epubs.siam.org/doi/abs/10.1137/0207020,,,,,,,,O(log^2(n)),O(log^2(n)),,,,,n: number of vertices,,,,SIMD-SM-R (CREW PRAM?),,,,,,,,,,,,,,1,n^3,,,"promised to have ""proof of correctness and details of timing"": https://dl.acm.org/doi/book/10.5555/908319; originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515",,,,,,,,,,,,,,,,,,,,,,,
13,Strongly Connected Components,0,,,Transitive closure method,,,,,,,,Chandra,1976,https://cir.nii.ac.jp/crid/1573105974323147776,,,,,,,,O(log^2(n)),,,,,,,,,,SIMD-SM-R (CREW PRAM?),,,,,,,,,,,,,,1,n^(log7)/log(n),,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
13,Strongly Connected Components,1,Transitive Closure,,Vertex collapse method,,,,,,,,Hirschberg,1976,https://dl.acm.org/doi/abs/10.1145/800113.803631,,,,,,,,O(log^2(n)),O(log^2(n)) ?,,O(n^3 log^2(n)) ?,,,,,,,SIMD-SM-R (CREW PRAM?),,,,,,,,,,,,,,1,n^3,,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
13,Strongly Connected Components,1,SCCs,,Vertex collapse method,,,,,,,,Hirschberg,1976,https://dl.acm.org/doi/abs/10.1145/800113.803631,,,,,,,,O(log^2(n)),O(log^2(n)),,O(n^2 log^2(n)) ?,,,n: number of vertices,,,,SIMD-SM-R (CREW PRAM?),,,,,,,,,,,,,,1,n^2,,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
13,Strongly Connected Components,1,SCCs; Transitive Closure,,Vertex collapse method,,,,,,,,Hirschberg et al.,1979,https://dl.acm.org/doi/abs/10.1145/359138.359141,,,,,,,,O(log^2(n)),O(log^2(n)),https://dl.acm.org/doi/abs/10.1145/359138.359141,O(n^2 log^2(n)) ,,,n: number of vertices,,,,SIMD-SM-R (CREW PRAM?),,,,,,,,,,,,,,1,n ceilling(n/log(n)),,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
13,Strongly Connected Components,0,,,Vertex collapse method,,,,,,,,Wyllie,1979,https://hdl.handle.net/1813/7502,,,,,,,,O(log^2(n)),,,,,,,,,,MIMD-TC-R,,,,,,,,,,,,,,1,n+2m,,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
13,Strongly Connected Components,0,,,Vertex collapse method,,,,,,,,Nassimi and Sahni,1980,https://epubs.siam.org/doi/abs/10.1137/0209058,,,,,,,,O(n^0.5 log(n)),,,,,,,,,,SIMD-SM-R (CREW PRAM?),,,,,,,,,,,,,,1,n,,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
13,Strongly Connected Components,1,SCCs; Transitive Closure,,,,,,,,,,Chin et al.,1982,https://dl.acm.org/doi/pdf/10.1145/358628.358650,,,,,,,,O(log^2(n)),O(log^2(n)),,,,,,,,,SIMD-SM-R (CREW PRAM?),,,,,,,,,,,,,,1,n ceilling(n/log^2(n)),,,"originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515
refrenced this https://hub.hku.hk/handle/10722/151778 ? don't have access to it but same authors, maybe same content?",,,,,,,,,,,,,,,,,,,,,,,
13,Strongly Connected Components,0,,,Vertex collapse method,,,,,,,,Savage and Ja'Ja',1981,https://epubs.siam.org/doi/abs/10.1137/0210051,,,,,,,,O(log(n)log(d)),,,,,,,,,,SIMD-SM-R (CREW PRAM?),,,,,,,,,,,,,,1,n^3/log(n),,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
13,Strongly Connected Components,0,,,Vertex collapse method,,,,,,,,Savage and Ja'Ja',1981,https://epubs.siam.org/doi/abs/10.1137/0210051,,,,,,,,O(log^2(n)),,,,,,,,,,SIMD-SM-R (CREW PRAM?),,,,,,,,,,,,,,1,m+n log(n),,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
13,Strongly Connected Components,0,,,Vertex collapse method,,,,,,,,Savage,1981,https://link.springer.com/chapter/10.1007/978-3-642-68402-9_32,,,,,,,,O(n+m),,,,,,,,,,Systolic array,,,,,,,,,,,,,,1,n+1,,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
13,Strongly Connected Components,0,,,Vertex collapse method,,,,,,,,Nath and Maheshwari,1982,https://www.sciencedirect.com/science/article/pii/0020019082901314,,,,,,,,O(log^2(n)),,,,,,,,,,SIMD-SM (EREW PRAM?),,,,,,,,,,,,,,1,m+n log(n),,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
13,Strongly Connected Components,0,,,Vertex collapse method,,,,,,,,Shiloach and Vishkin,1982,"SHILOACH, Y., AND VISHKIN, U. 1982a. An O(log n) parallel connectivity algorithm. J Algorithms 3, 1 (Mar.), 57-67.",,,,,,,,O(log(n)),,,,,,,,,,SIMD-SM-RW (probabalistic) (CRCW PRAM?),,,,,,,,,,,,,,1,n+2m,,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
13,Strongly Connected Components,0,,,Transitive closure method,,,,,,,,Kucera,1982,https://www.sciencedirect.com/science/article/pii/002001908290093X,,,,,,,,O(log(n)),,,,,,,,,,SIMD-SM-RW (CRCW PRAM?),,,,,,,,,,,,,,1,n^4,,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
13,Strongly Connected Components,0,,,Vertex collapse method,,,,,,,,Reif and Spirakis,1982,https://apps.dtic.mil/sti/citations/ADA114875,,,,,,,,O(log log(n)) (expected),,,,,,,,,,SIMD-SM-RW (probabalistic) (CRCW PRAM?),,,,,,,,,,,,,,1,O(n^2) (expected),,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
13,Strongly Connected Components,0,,,Vertex collapse method,,,,,,,,Hambrusch,1982,https://www.proquest.com/docview/303249065?pq-origsite=gscholar&fromopenview=true,,,,,,,,O(n^(3/2)),,,,,,,,,,Systolic array,,,,,,,,,,,,,,1,n,,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
14,Minimum Spanning Tree (MST),1,"Undirected, General MST",163,Parallel algorithm,,1,1,O(E log(V)/p),,,[https://www.sciencedirect.com/science/article/pii/S0743731506001262 Bader & Cong Parallel Implementation  (2006)],Bader & Cong Parallel Implementation ,2006,https://www.sciencedirect.com/science/article/pii/S0743731506001262,,,,0,0,5.01,"E: 3,
V: 5.01",O(E \log(V)/p),$O(E\log(V)/p)$,https://www.sciencedirect.com/science/article/pii/S0743731506001262,$O(E\log(V)$,https://www.sciencedirect.com/science/article/pii/S0743731506001262,only experimentally?,"V: number of vertices
E: number of edges
U: maximum edge weight
p: number of processors",V,https://www.sciencedirect.com/science/article/pii/S0743731506001262,0,PRAM/SMPs?,words,3,"V: 3,
E: 1",O(V) total,Initializes and uses a constant number of arrays of size O(V) (and does work similar to work done in Boruvka/Prim algorithm),1,0,,0,,0,,0,1,p,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,8.7,583.3333333,,,,,,,,5,,,Combinatorics
14,Minimum Spanning Tree (MST),0.001,,,,,,,,,,"[https://dl.acm.org/doi/pdf/10.1145/2145816.2145842 Nobari, Cao, Karras, Bressan (2012)]","Nobari, Cao, Karras, Bressan",2012,https://dl.acm.org/doi/pdf/10.1145/2145816.2145842,,,,,,,,O(E\log(V)),,,,,,,,,,,,,,,,,,,,,,,,1,,,,,,,,,,,,,,,,,,,,,,,,,,,
14,Minimum Spanning Tree (MST),0,,,Kruskal method,,,,,,,,Levitt and Kautz ,1972,https://dl.acm.org/doi/abs/10.1145/361573.361576,,,,,,,,O(n^2),,,,,,n: number of vertices,,,,"""Systolic array""",,,,,,,,,,,,,,1,O(n^2),,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
14,Minimum Spanning Tree (MST),0.001,"connected, undirected, weighted",,Sollin method,,,,,,,,Savage,1977,https://www.proquest.com/docview/302856503?pq-origsite=gscholar&fromopenview=true,,,,,,,,O(log^2(n)),,,O(n^2) ??,,"yes? speedup=O(n^2/log^2(n))
efficiency=O(1/log(n))",n: number of vertices,,,,SIMD-SM-R (CREW PRAM?),,,,,,,,,,,,,,1,n^2/log(n),,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2516,,,,,,,,,,,,,,,,,,,,,,,
14,Minimum Spanning Tree (MST),0,,,Prim-Dijkstra method,,,,,,,,Bentley,1980,https://www.sciencedirect.com/science/article/pii/0196677480900048,,,,,,,,O(n log(n)),,,,,,n: number of vertices,,,,"""tree""",,,,,,,,,,,,,,1,n/log(n),,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2517,,,,,,,,,,,,,,,,,,,,,,,
14,Minimum Spanning Tree (MST),0,,,Prim-Dijkstra method or Solin ??,,,,,,,,Deo and Yoo,1981,"DEO, N., AND YOO, Y. B. 1981. Parallel algorithms for the minimum spanning tree problem.",,,,,,,,,,,,,,,,,,MIMD-TC,,,,,,,,,,,,,,1,,,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2518,,,,,,,,,,,,,,,,,,,,,,,
14,Minimum Spanning Tree (MST),0,,,Sollin method,,,,,,,,Savage and Ja'Ja',1981,https://epubs.siam.org/doi/abs/10.1137/0210051,,,,,,,,O(log^2(n)),,,,,,n: number of vertices,,,,SIMD-SM-SR,,,,,,,,,,,,,,1,n^2,,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2519,,,,,,,,,,,,,,,,,,,,,,,
14,Minimum Spanning Tree (MST),0,,,Sollin method,,,,,,,,Nath and Maheshwari,1982,https://www.sciencedirect.com/science/article/pii/0020019082901314,,,,,,,,O(log^2(n)),,,,,,n: number of vertices,,,,SIMD-SM (EREW PRAM?),,,,,,,,,,,,,,1,n^2/log(n),,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2520,,,,,,,,,,,,,,,,,,,,,,,
14,Minimum Spanning Tree (MST),0,,,Kruskal method,,,,,,,,Kucera,1982,https://www.sciencedirect.com/science/article/pii/002001908290093X,,,,,,,,O(log(m)),,,,,,"n: number of edges
m: number of edges",,,,SIMD-SM-RW (CRCW PRAM?),,,,,,,,,,,,,,1,mn^4,,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2521,,,,,,,,,,,,,,,,,,,,,,,
14,Minimum Spanning Tree (MST),1,,,Sollin method,,,,,,,,Chin et al.,1982,https://dl.acm.org/doi/abs/10.1145/358628.358650,,,,,,,,O(log^2(n)),O(log^2(n)),,,,,n: number of vertices,,,,SIMD-SM-R (CREW PRAM?),,,,,,,,,,,,,,1,n ceiling(n/log^2(n)),,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2522,,,,,,,,,,,,,,,,,,,,,,,
14,Minimum Spanning Tree (MST),0,,,Sollin method,,,,,,,,Hambrusch,1982,https://www.proquest.com/docview/303249065?pq-origsite=gscholar&fromopenview=true,,,,,,,,O(n),,,,,,n: number of vertices,,,,"""Systolic array""",,,,,,,,,,,,,,1,n^2,,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2523,,,,,,,,,,,,,,,,,,,,,,,
14,Minimum Spanning Tree (MST),0,,,Sollin method,,,,,,,,Hirschberg,1982,"HIRSCHBERG, D. S. 1982. Parallel graph algorithms without memory conflicts.",,,,,,,,O(log(n)),,,,,,n: number of vertices,,,,SIMD-SM-RW (CRCW PRAM?),,,,,,,,,,,,,,1,O(n^3),,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2524,,,,,,,,,,,,,,,,,,,,,,,
14,Minimum Spanning Tree (MST),0,,,Kruskal method,,,,,,,,Yoo,1983,https://www.osti.gov/biblio/5689584,,,,,,,,O(m),,,,,,m: number of edges,,,,MIMD-TC,,,,,,,,,,,,,,1,O(m),,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2525,,,,,,,,,,,,,,,,,,,,,,,
15,Closest Pair Problem,1,"2-dimensional space, Euclidean metric",,,,,,,,,[https://link.springer.com/article/10.1007/BF01758749 Cole & Gooddrich (1988)],Cole & Gooddrich,1988,https://link.springer.com/article/10.1007/BF01758749,,,,,,,,O(log n),O(log n),https://link.springer.com/article/10.1007/BF01758749,O(n log n),https://link.springer.com/article/10.1007/BF01758749,no,n: number of points,,,,EREW PRAM,,,,,,,,,0,,0,,0,1,O(n),0,0,,"Given $n$ points in 2-dimensional space equipped with the Eucildean metric, find a pair of points with the smallest distance between them. ",,,,,,,,,,,,,,,,,,,,,,
15,Closest Pair Problem,1,"k-dimensional space, $l_m$ (or $l_\infty$) norm",,,,,,,,,[https://pure.mpg.de/pubman/faces/ViewItemOverviewPage.jsp?itemId=item_1834886 Lenhof & Smid (1992)],Lenhof & Smid,1992,https://pure.mpg.de/pubman/faces/ViewItemOverviewPage.jsp?itemId=item_1834886,,,,,,,,O((log n)^2 log log n),O((log n)^2 log log n),https://pure.mpg.de/pubman/faces/ViewItemOverviewPage.jsp?itemId=item_1834886,O(nlog n log log n + k),https://pure.mpg.de/pubman/faces/ViewItemOverviewPage.jsp?itemId=item_1834886,no,"n: number of points
k: kth closest pair",,,,CRCW PRAM,,,,,,,,,0,,0,,0,1,O(n/log n + k/((log n)^2 log log n)),0,0,,"Given $n$ points in metric space, typically $k$-dimensional space equipped with $l_m$ (or $l_\infty$) norm, find a pair of points with the smallest distance between them. ",,,,,,,,,,,,,,,,,,,,,,
15,Closest Pair Problem,1,2-dimensional array representation,173,,,1,1,O(n) using O(n^2) processors,,,[https://www.sciencedirect.com/science/article/pii/0020019080900356 Dyer (1980)],Dyer,1980,https://www.sciencedirect.com/science/article/pii/0020019080900356,,,,0,0,3,n: 3,$O(n)$ using $O(n^2)$ processors,$O(n)$,https://www.sciencedirect.com/science/article/pii/0020019080900356,$O(n^2)$?,https://www.sciencedirect.com/science/article/pii/0020019080900356,no,n: number of points,n,,,log-space pyramid cellular automaton,words,5,n: 5,O(n^2),https://www.sciencedirect.com/science/article/pii/0020019080900356,0,1,,0,,0,,0,1,O(n^2),0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,1000,1000,,,,,,,,4,,,Image Processing
19,Integer Factoring,0.001,Second Category Integer Factoring,204,,,1,1,O(e^{sqrt((2+o(1))n*logn)}),,,[https://www.ams.org/journals/mcom/1993-61-203/S0025-5718-1993-1182953-4/S0025-5718-1993-1182953-4.pdf Rational sieve (1993)],Rational sieve,1993,https://www.ams.org/journals/mcom/1993-61-203/S0025-5718-1993-1182953-4/S0025-5718-1993-1182953-4.pdf,,,,0,0,8,n: 8,O(e^{sqrt((2+o(1))n*logn)}),,,,,,"n: number of bits in the integer
B: bound parameter",n,,,Word RAM?,bits,3,"n: 3,
B: 5",O(n+(B/logB)^2)?,Same general approach as Dixon's algorithm,1,0,,0,,0,,0,1,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,4,,,Numerical Analysis
22,String Search,0.001,Single String Search,243,,,1,1,O(n (\log_s m)/m),,,[https://link.springer.com/chapter/10.1007/BFb0030778 Backward Non-Deterministic DAWG Matching (BNDM) (1998)],Backward Non-Deterministic DAWG Matching (BNDM),1998,https://link.springer.com/chapter/10.1007/BFb0030778,,,,0,0,3,"n: 3,
m: 3,
m+n: 3",O(n+m),,,,,,"$m$: pattern length
$n$: length of searchable text
$s$: size of the alphabet",m+n,,,Word RAM with bit parallelism,words,3,"m: 3,
s: 3,
m+n: 3",$O(sm)$,https://link.springer.com/chapter/10.1007/BFb0030778,0,1,,0,,0,,0,1,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,,Combinatorics
25,Line Clipping,0.001,convex and non-convex polyhedral window,271,,,1,1,O(np)?,^ see above,^ see above,[https://onlinelibrary.wiley.com/doi/abs/10.1111/1467-8659.1510061 Skala (1996)],Skala,1996,https://onlinelibrary.wiley.com/doi/abs/10.1111/1467-8659.1510061,,,,0,0,3,"n: 3,
p: 3",O(np)?,,,,,,"n: number of lines
p: number of faces on polyhedron",n,,,Word/Real RAM,words,1,n: 1,O(1) auxiliary?,"Easily derived? (O(1) per segment, space can be re-used)",1,0,,0,,0,,0,1,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1,1000,,,,,,,,6,,,Image Processing
38,Optimal Binary Search Trees,1,Approximate OBST,350,,,1,0,O(n^0.6),,,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.54.6940&rep=rep1&type=pdf Karpinski (1996)],Karpinski,1996,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.54.6940&rep=rep1&type=pdf,,,,0,0,2.6,n: 2.6,O(n^{0.6}),$O(n^{0.6})$,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.54.6940&rep=rep1&type=pdf,$O(n^{1.6})$?,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.54.6940&rep=rep1&type=pdf,no,n: number of elements,n,,,CREW PRAM,,1,n: 1,O(1),Derived: dynamic programming and making use of Monge matrix properties,1,0,,0,,1,\epsilon = o(1),0,1,n,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,63,,,,,,,,,1,,,Combinatorics
55,Variance Calculations,1,,452,,0,1,1,O(log n),Any distribution of values?,(need to read entire input),[http://i.stanford.edu/pub/cstr/reports/cs/tr/79/773/CS-TR-79-773.pdf Chan's algorithm Parallel Implementation (1979)],Chan's algorithm Parallel Implementation,1979,http://i.stanford.edu/pub/cstr/reports/cs/tr/79/773/CS-TR-79-773.pdf,,,,0,0,2,n: 2,O(\log n),$O(\log n)$,https://dbs.ifi.uni-heidelberg.de/files/Team/eschubert/publications/SSDBM18-covariance-authorcopy.pdf,$O(n\log n)$,https://dbs.ifi.uni-heidelberg.de/files/Team/eschubert/publications/SSDBM18-covariance-authorcopy.pdf,no,n: number of values,n,,,EREW(??) PRAM,words,3,n: 3,O(1) per processor,"Each processor maintains O(1) information related to count, mean, M2",1,0,,0,,0,,0,1,O(n),0,0,https://dbs.ifi.uni-heidelberg.de/files/Team/eschubert/publications/SSDBM18-covariance-authorcopy.pdf,,,,,,,,,,,1,,,,,,,,,6,,,Numerical Analysis
56,Topological Sorting,1,Topological Sorting,455,,,1,1,O( log² V),,,[https://www.proquest.com/docview/920003939?pq-origsite=gscholar&fromopenview=true Dekel; Nassimi & Sahni Parallel Implementation  (1981)],Dekel; Nassimi & Sahni Parallel Implementation ,1981,https://www.proquest.com/docview/920003939?pq-origsite=gscholar&fromopenview=true,,,,0,0,2,V: 2,O(\log^2 V),$O(\log^2 V)$,https://www.proquest.com/docview/920003939?fromopenview=true&pq-origsite=gscholar&parentSessionId=sFqBaY3zmnfUFqEv4cfbNEqD%2FS7jMtMwgheB67Bgqws%3D,$O(V^3\log^2 V)$?,https://www.proquest.com/docview/920003939?fromopenview=true&pq-origsite=gscholar&parentSessionId=sFqBaY3zmnfUFqEv4cfbNEqD%2FS7jMtMwgheB67Bgqws%3D,no,"V: number of vertices
E: number of edges",V,,,"PRAM (not sure what type), SIMD computers?",words,5,V: 5,O(V^2)??,"Their n*n*n cube setup seems to only require each processor to keep track of one entry A[i, j], B[i, j] and propagates the results across the structure, only requiring O(1) auxiliary space per processor. Comparison sorting can be done easily with O(1) auxiliary space per processor.",1,0,,0,,0,,0,1,O(V^3)?,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Combinatorics
58,Lowest Common Ancestor,1,Lowest Common Ancestor with Static Trees,,,,1,1,O(m+log(n)),,,[https://epubs.siam.org/doi/abs/10.1137/0217079?journalCode=smjcat Schieber; Vishkin [Parallel] (1988)],Schieber; Vishkin [Parallel],1988,https://epubs.siam.org/doi/abs/10.1137/0217079?journalCode=smjcat,,,,0,0,,,O(m+log(n)),$O(m+\log(n))$,https://epubs.siam.org/doi/epdf/10.1137/0217079,$O(m+n)$,https://epubs.siam.org/doi/epdf/10.1137/0217079,no,"n: number of vertices
m: number of total number of operations (queries, links, and cuts)",,,,EREW PRAM,words,O(n) total (auxiliary?),n: 3,https://www.proquest.com/docview/919780720?pq-origsite=gscholar&fromopenview=true,,,,,0,,0,,0,1,O(n/log n),0,0,,,,,,,,,,,,,,,,,,,,,,,,Combinatorics
58,Lowest Common Ancestor,0.001,Lowest Common Ancestor with Static Trees,,,,1,1,O(m+n),Any distribution of values?,(need to read entire input + all queries),"[https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.64.5439 Fischer, Heun (2006)]","Fischer, Heun",2006,https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.64.5439,,,,0,0,,,O(m+n),,,,,,"n: number of vertices
m: number of total number of operations (queries, links, and cuts)",,,,Word RAM,words,O(n),n: 3,https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.64.5439,,,,,0,,0,,0,1,O(n/log n),0,0,,,,,,,,,,,,,,,,,,,,,,,,Combinatorics
58,Lowest Common Ancestor,0.001,Lowest Common Ancestor with Static Trees,,,,1,1,O(m*log(h)),,,[https://www.schoolofhaskell.com/user/edwardk/online-lca Kmett (2015)],Kmett,2015,https://www.schoolofhaskell.com/user/edwardk/online-lca,,,,0,0,,,O(m*log(h)),,,,,,"n: number of vertices
m: number of total number of operations (queries, links, and cuts)
h: height of tree",,,,Word RAM,words,,,,,,,,0,,0,,0,1,O(n/log n),0,0,,,,,,,,,,,,,,,,,,,,,,,,Combinatorics
60,Clique Problems,0.001,"Enumerating Maximal Cliques, arbitrary graph",478,,,1,1,O(3^{(n/3)}) total work? (previously this cell said O(n^4)),,,[https://arxiv.org/pdf/1801.00202.pdf Segundo; Artieda;  Strash Parallel (2011)],Segundo; Artieda;  Strash Parallel,2011,https://arxiv.org/pdf/1801.00202.pdf,,,,0,-,8,n: 8,$O(3^{(n/3)})$ total work? (previously this cell said $O(n^4)$),,,,,,"n: number of vertices
m: number of edges",n,,,Word RAM with bit parallelism,words,5,n: 5,O(n^2) auxiliary??,Keep track of an O(n)-sized recursive stack with O(n)-sized lists as elements? (this algo builds off of Bron-Kerbosch),1,0,,0,,0,,0,1,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
64,Delaunay Triangulation,1,2-Dimensional Delaunay Triangulation,524,,,1,1,O(nlogn),,,[https://web.archive.org/web/20180425231851/https://www.cs.cmu.edu/~ygu1/paper/SPAA16/Incremental.pdf Belloch (2006)],Belloch,2006,https://web.archive.org/web/20180425231851/https://www.cs.cmu.edu/~ygu1/paper/SPAA16/Incremental.pdf,,,,0,0,4,n: 4,$O(\log^2 n)$,$O(\log^2 n)$,https://web.archive.org/web/20180425231851/https://www.cs.cmu.edu/~ygu1/paper/SPAA16/Incremental.pdf,$O(n\log n)$,https://web.archive.org/web/20180425231851/https://www.cs.cmu.edu/~ygu1/paper/SPAA16/Incremental.pdf,yes,n: number of points,n,,,CRCW PRAM,words,3,n: 3,O(n),"Keep track of triangles in current triangulation, based on which points have been added so far and which triangles to remove (see other incremental algos)",1,0,,1,Las Vegas?,0,,0,1,$O(n/\log n)$,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics
78,Stable Matching Problem,0.001,Almost Stable Marriage Problem,619,,,1,0,O(1),,,"[https://arxiv.org/pdf/0812.4893.pdf Valentin Polishchuk, and Jukka Suomela (2008)]","Valentin Polishchuk, and Jukka Suomela",2008,https://arxiv.org/pdf/0812.4893.pdf,,,,0,0,1,n: 1,$O(1+\Delta/\epsilon)$,$O(1+\Delta/\epsilon)$,https://arxiv.org/pdf/0812.4893.pdf,??,https://arxiv.org/pdf/0812.4893.pdf,no,"n: number of people in set
Delta: maximum number of acceptable partners for one participant (usually O(1))
eps: error term",n,,,Word RAM,words,1,n: 1,O(1),derived: must be \leq time complexity,1,0,,0,,1,2 + \epsilon,0,1,,0,0,,,,,,,,,,,,1,,,,,,,,,4,,,Combinatorics
78,Stable Matching Problem,0.001,Stable Marriage Problem,618,,,1,1,O(n^2),,,[https://link.springer.com/content/pdf/10.1007/BF02136029.pdf S. S. TSENG and R. C. T. LEE (1984)],S. S. TSENG and R. C. T. LEE,1984,https://link.springer.com/content/pdf/10.1007/BF02136029.pdf,,,,0,0,5,n: 5,O(n^2),,,,,,n: number of men and number of women,n,,,Word RAM,words,3,n: 3,$O(n)$ per processor?,Only need to keep track of current (provisional) matchings,1,0,,0,,0,,0,1,,0,0,https://di.ku.dk/forskning/Publikationer/tekniske_rapporter/tekniske-rapporter-1997/97-05.pdf,,,,,,,,,,,1000000,,,,,,,,,4,,,Combinatorics
78,Stable Matching Problem,1,Stable Marriage Problem,620,,,1,1,O(n^{0.5}),,,"[http://theory.stanford.edu/~megiddo/pdf/soda94.pdf Tomas Feder, Nimrod Megiddo, Serge A. Plotkin (1994)]","Tomas Feder, Nimrod Megiddo, Serge A. Plotkin",1994,http://theory.stanford.edu/~megiddo/pdf/soda94.pdf,,,,0,0,2.5,n: 2.5,$O(\Delta^{0.5} \log^3(\Delta)$,$O(\Delta^{0.5} \log^3(\Delta)$,http://theory.stanford.edu/~megiddo/pdf/soda94.pdf,$O(\Delta^{4.5} \log^3(\Delta)$?,http://theory.stanford.edu/~megiddo/pdf/soda94.pdf,no,"n: number of men and number of women
Delta: maximum number of acceptable partners for one participant",n,,,Word RAM,words,2.5,n: 2.5,$O(n^{0.5})$ auxiliary per processor?,bounded by runtime,1,0,,0,,0,,0,1,$\Delta^4$,0,0,,,,,,,,,,,,31.62,,,,,,,,,4,,,Combinatorics
80,Maximum Subarray Problem,1,1D Maximum Subarray,628,,,1,1,O(log n),^see above,^see above,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.1291&rep=rep1&type=pdf Perumalla and Deo (1995)],Perumalla and Deo,1995,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.1291&rep=rep1&type=pdf,,,,0,0,2,n: 2,O(\log n),$O(\log n)$,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.1291&rep=rep1&type=pdf,$O(n)$,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.1291&rep=rep1&type=pdf,yes,n: length of array,n,,,EREW PRAM,words,3,n: 3,O(n) auxiliary,constant number of arrays as outlined in algorithm,1,0,,0,,0,,0,1,O(n/log n),0,0,,,,,,,,,,,,9965,,,,,,,,,3,,,Combinatorics
80,Maximum Subarray Problem,0.001,1D Maximum Subarray,629,,,1,1,O(log n),^see above,^see above,"[https://ieeexplore.ieee.org/document/6972008 Ferreira, Camargo, Song (2014)]","Ferreira, Camargo, Song",2014,https://ieeexplore.ieee.org/document/6972008,,,,0,0,2,n: 2,O(\log n),,,,,,n: length of array,n,,,EREW PRAM?,words,3,n: 3,O(n) auxiliary,constant number of arrays as outlined in algorithm,1,0,,0,,0,,0,1,O(n/log n),0,1,,,,,,,,,,,,9965,,,,,,,,,3,,,Combinatorics
80,Maximum subarray problem,1,1-dimensional,,,,1,1,O(log n),"""Any distribution/runtime same regardless of input""",(same general behavior regardless of input),[https://www.sciencedirect.com/science/article/abs/pii/016781919400063G Wen (1995)],Wen,1995,https://www.sciencedirect.com/science/article/abs/pii/016781919400063G,,,,,,,,O(log n),$O(\log n)$,https://www.sciencedirect.com/science/article/abs/pii/016781919400063G,$O(n)$,https://www.sciencedirect.com/science/article/abs/pii/016781919400063G,??,n: length of array,,,,EREW PRAM,words,,,,,,,,0,,0,,0,1,O(n/log n),0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
80,Maximum subarray problem,1,2-dimensional,,,,1,1,O(log^2 n),^see above,^see above,[https://www.sciencedirect.com/science/article/pii/0167642387900347 Smith (1987)],Smith,1987,https://www.sciencedirect.com/science/article/pii/0167642387900347,,,,,,,,O(log^2 n),$O(\log^2 n)$,https://www.sciencedirect.com/science/article/pii/0167642387900347,???,https://www.sciencedirect.com/science/article/pii/0167642387900347,no?,n: dimension of array,,,,PRAM (not sure which type),words,,,,,,,,0,,0,,0,1,?,0,0,,,,,,,,,,,,,,,,,,,,,,,,Combinatorics
80,Maximum subarray problem,1,2-dimensional,,,,1,1,O(log n),^see above,^see above,[https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.1291&rep=rep1&type=pdf KALYAN PERUMALLA and NARSINGH DEO (1995)],KALYAN PERUMALLA and NARSINGH DEO,1995,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.1291&rep=rep1&type=pdf,,,,,,,,O(log n),$O(\log n)$,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.1291&rep=rep1&type=pdf,$O(n^3)$,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.1291&rep=rep1&type=pdf,yes,n: dimension of array,,,,CREW PRAM,words,,,,,,,,0,,0,,0,1,O(n^3 / log n),0,0,,,,,,,,,,,,,,,,,,,,,,,,Combinatorics
80,Maximum subarray problem,1,2-dimensional,,,,1,1,O(log n),^see above,^see above,[https://www.sciencedirect.com/science/article/abs/pii/016781919400063G Wen (1995)],Wen,1995,https://www.sciencedirect.com/science/article/abs/pii/016781919400063G,,,,,,,,O(log n),$O(\log n)$,https://www.sciencedirect.com/science/article/abs/pii/016781919400063G,$O(n^3)$,https://www.sciencedirect.com/science/article/abs/pii/016781919400063G,??,n: dimension of array,,,,EREW PRAM,words,,,,,,,,0,,0,,0,1,O(n^3 / log n),0,0,,,,,,,,,,,,,,,,,,,,,,,,Combinatorics
81,Constructing Suffix Trees,1,Constructing Suffix Trees,635,,,1,1,O(log^4(n)),,,[https://www.sciencedirect.com/science/article/pii/S0022000097914963 Hariharan (1997)],Hariharan,1997,https://www.sciencedirect.com/science/article/pii/S0022000097914963,,,,0,0,2.03,n: 2.03,O(log^4(n)),$O(\log^4(n))$,https://www.sciencedirect.com/science/article/pii/S0022000097914963,$O(n)$,https://www.sciencedirect.com/science/article/pii/S0022000097914963,yes,n: length of string,n,,,CREW PRAM,words,3,n: 3,O(n),https://www.sciencedirect.com/science/article/pii/S0022000097914963,0,1,,0,,0,,0,1,$O(n/\log^4(n))$?,0,0,,,,,,,,,,,,9860.7,,,,,,,,,4,,,Combinatorics
81,Constructing Suffix Trees,1,Constructing Suffix Trees,636,,,1,1,O(log^2(n)),,,[https://link.springer.com/content/pdf/10.1007/3-540-57811-0_3.pdf Süleyman Cenk Sahinalp ; Uzi Vishkin (1994)],Süleyman Cenk Sahinalp ; Uzi Vishkin,1994,https://link.springer.com/content/pdf/10.1007/3-540-57811-0_3.pdf,,,,1,0,2.01,n: 2.01,$O(n^\epsilon)$,$O(n^\epsilon)$,https://link.springer.com/content/pdf/10.1007/3-540-57811-0_3.pdf,$O(n \log^* n)$,https://link.springer.com/content/pdf/10.1007/3-540-57811-0_3.pdf,no,"n: length of string
epsilon: time/space parameter",n,,,CRCW PRAM,words,4.01,n: 4.01,$O(n^{(1+\eps)})$ for any fixed eps>0,https://link.springer.com/content/pdf/10.1007/3-540-57811-0_3.pdf,0,1,,0,,0,,0,1,,0,0,,,,,,,,,,,,99.3,100.3524673,,397.2674256,0,,893.8517077,0,,4,,,Combinatorics
81,Constructing Suffix Trees,1,Constructing Suffix Trees,637,,,1,1,O(log n),,,[https://www.cs.rutgers.edu/~farach/pubs/PRAMSuffixICALP.pdf Farach (1997)],Farach,1997,https://www.cs.rutgers.edu/~farach/pubs/PRAMSuffixICALP.pdf,,,,0,0,2,n: 2,O(\log n),$O(\log n)$,https://people.cs.rutgers.edu/~farach/pubs/PRAMSuffixICALP.pdf,$O(n)$,https://people.cs.rutgers.edu/~farach/pubs/PRAMSuffixICALP.pdf,yes,n: length of string,n,,,CRCW PRAM,words,3,n: 3,O(n),https://www.cs.rutgers.edu/~farach/pubs/PRAMSuffixICALP.pdf,0,1,,1,Las Vegas,0,,0,1,$O(n)$?,0,0,,,,,,,,,,,,1000,,,,,,,,,4,,,Combinatorics
81,Constructing Suffix Trees,1,Constructing Suffix Trees,638,,,1,1,O(logn),,,[https://www.researchgate.net/publication/228945502_On_parallel_transformations_of_suffix_arrays_into_suffix_trees Rytter (2004)],Rytter,2004,https://www.researchgate.net/publication/228945502_On_parallel_transformations_of_suffix_arrays_into_suffix_trees,,,,1,6->7,2,n: 2,O(\log n),$O(\log n)$,https://www.researchgate.net/publication/228945502_On_parallel_transformations_of_suffix_arrays_into_suffix_trees,$O(n\log n)$,https://www.researchgate.net/publication/228945502_On_parallel_transformations_of_suffix_arrays_into_suffix_trees,no,n: length of string,n,,,CREW PRAM,words,3,n: 3,O(n),https://www.researchgate.net/publication/228945502_On_parallel_transformations_of_suffix_arrays_into_suffix_trees,0,1,,0,,0,,0,1,$O(n)$,0,0,,,,,,,,,,,,9.965,1000,,19.93156857,0,,29.89735285,0,,4,,,Combinatorics
82,Ray Tracing,0.001,,643,,,0,0,O(n^2),,,[https://www.academia.edu/814419/A_New_Parallel_Algorithm_Provided_by_a_Computation_Time_Model J.-C. Nebel 1998 (1998)],J.-C. Nebel 1998,1998,https://www.academia.edu/814419/A_New_Parallel_Algorithm_Provided_by_a_Computation_Time_Model,,,,0,0,5,n: 5,O(n^2),,,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,1,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
82,Ray Tracing,0.001,,644,,,0,0,O(n^2),,,[ A. Chalmers; T. Davis; and E. Reinhard 2002 (2002)],A. Chalmers; T. Davis; and E. Reinhard 2002,2002,,,,,0,0,5,n: 5,O(n^2),,,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,1,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing
86,Graph Isomorphism Problem,0.001,Subgraph Isomorphism,665,,,1,1,"Asymptotics not given, actual times. Check",,,[https://dl.acm.org/doi/10.1145/321921.321925 Ullman (1976)],Ullman,1976,https://dl.acm.org/doi/10.1145/321921.321925,,,,1,0,#VALUE!,,,,,,,,"n: max number of vertices between the two graphs
m: min number of vertices between the two graphs",n,,,Word RAM,words, 3m,"n: 3
m: 3",O(mn)?,"Stores a constant number of n*m matrices, along with a constant number of vectors of length O(m+n)",1,0,,0,,0,,0,1,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
98,The Set-Covering Problem,0.001,,774,,,1,1,O(n^2),,,[https://www.semanticscholar.org/paper/An-efficient-distributed-algorithm-for-computing-Cardoso-Abreu/ce32696c1176800c5b90fab026bf93f282e2b161 Cardoso; Nuno; Abreu; Rui (2014)],Cardoso; Nuno; Abreu; Rui,2014,https://www.semanticscholar.org/paper/An-efficient-distributed-algorithm-for-computing-Cardoso-Abreu/ce32696c1176800c5b90fab026bf93f282e2b161,,,,0,0,5,n: 5,O(n^2),,,,,,,n,,,,,#VALUE!,,,,,,,0,,0,,1,1,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics
122,Sequence-to-Graph Alignment,0.001,Sequence-to-Graph Alignment,938,,,1,1,O(V + mE),,,"[https://www.ncbi.nlm.nih.gov/pubmed/30851095 Rautiainen, Marschall (2019)]","Rautiainen, Marschall",2019,https://www.ncbi.nlm.nih.gov/pubmed/30851095,,,,0,0,5,"V: 5,
E: 3,
m: 3,
N: 5",$O(V + mE\log w)$,,,,,,"m: length of input sequence
V: number of vertices
E: number of edges
w: size of word",N,https://www.ncbi.nlm.nih.gov/pubmed/30851095,0,Word RAM,words,3,"V: 3,
m: 3,
N: 3",O(mV),"Derived: algorithm uses a V-sized array of bitvectors each of which is of length m, and also uses a priority queue which has at most V elements. The precomputed pattern bitvectors also takes up O(V * m) space.",1,0,,0,,0,,0,1,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics
,All-Pairs Shortest Paths (APSP),0,,,Warshall-Floyd method,,,,,,,,Levitt and Kautz,1972,https://dl.acm.org/doi/abs/10.1145/361573.361576,,,,,,,,O(n),,,,,,,,,,Systolic array,,,,,,,,,,,,,,1,n^2,,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
,All-Pairs Shortest Paths (APSP),0,,,Warshall-Floyd method,,,,,,,,Arjomandi,1975,https://dl.acm.org/doi/abs/10.5555/908319,,,,,,,,,,,,,,,,,,MIMD-TC,,,,,,,,,,,,,,1,,,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
,All-Pairs Shortest Paths (APSP),0,,,Repeated plus-min method,,,,,,,,Savage,1977,https://apps.dtic.mil/sti/citations/ADA056888,,,,,,,,O(log^2(n)),,,,,,,,,,SIMD-SM-R (CREW PRAM?),,,,,,,,,,,,,,1,n^3/log(n),,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
,All-Pairs Shortest Paths (APSP),0,,,Warshall-Floyd method,,,,,,,,Deo et al.,1980,https://cir.nii.ac.jp/crid/1571698600670249216,,,,,,,,O(n^3/p+pn),,,,,,,,,,MIMD-TC,,,,,,,,,,,,,,1,p<<n,,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
,All-Pairs Shortest Paths (APSP),0,,,Repeated plus-min method,,,,,,,,Dekel et al.,1981,https://epubs.siam.org/doi/abs/10.1137/0210049,,,,,,,,O(log^2(n)),,,,,,,,,,"SIMD-PS, SIMD-CC",,,,,,,,,,,,,,1,n^3,,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,
,All-Pairs Shortest Paths (APSP),0,,,Repeated plus-min method,,,,,,,,Kucera,1982,https://www.sciencedirect.com/science/article/pii/002001908290093X,,,,,,,,O(log(n)),,,,,,,,,,SIMD-SM-RW (CRCW PRAM?),,,,,,,,,,,,,,1,n^4,,,originally found in  https://dl.acm.org/doi/pdf/10.1145/2514.2515,,,,,,,,,,,,,,,,,,,,,,,